// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ConditionsGetter is an autogenerated mock type for the ConditionsGetter type
type ConditionsGetter struct {
	mock.Mock
}

type ConditionsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ConditionsGetter) EXPECT() *ConditionsGetter_Expecter {
	return &ConditionsGetter_Expecter{mock: &_m.Mock}
}

// GetStatus provides a mock function with given fields: objectMeta, _a1
func (_m *ConditionsGetter) GetStatus(objectMeta v1.ObjectMeta, _a1 *[]v1.Condition) *v1.ConditionStatus {
	ret := _m.Called(objectMeta, _a1)

	var r0 *v1.ConditionStatus
	if rf, ok := ret.Get(0).(func(v1.ObjectMeta, *[]v1.Condition) *v1.ConditionStatus); ok {
		r0 = rf(objectMeta, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConditionStatus)
		}
	}

	return r0
}

// ConditionsGetter_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type ConditionsGetter_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - objectMeta v1.ObjectMeta
//   - _a1 *[]v1.Condition
func (_e *ConditionsGetter_Expecter) GetStatus(objectMeta interface{}, _a1 interface{}) *ConditionsGetter_GetStatus_Call {
	return &ConditionsGetter_GetStatus_Call{Call: _e.mock.On("GetStatus", objectMeta, _a1)}
}

func (_c *ConditionsGetter_GetStatus_Call) Run(run func(objectMeta v1.ObjectMeta, _a1 *[]v1.Condition)) *ConditionsGetter_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1.ObjectMeta), args[1].(*[]v1.Condition))
	})
	return _c
}

func (_c *ConditionsGetter_GetStatus_Call) Return(_a0 *v1.ConditionStatus) *ConditionsGetter_GetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConditionsGetter_GetStatus_Call) RunAndReturn(run func(v1.ObjectMeta, *[]v1.Condition) *v1.ConditionStatus) *ConditionsGetter_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewConditionsGetter creates a new instance of ConditionsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConditionsGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConditionsGetter {
	mock := &ConditionsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
